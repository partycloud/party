// Code generated by protoc-gen-go. DO NOT EDIT.
// source: party.proto

/*
Package partycloud is a generated protocol buffer package.

It is generated from these files:
	party.proto

It has these top-level messages:
	Event
	ListServersRequest
	ListServersResponse
	CreateServerRequest
	CreateServerResponse
	Server
	DataFiles
	ListGuildsRequest
	ListGuildsResponse
	Guild
*/
package partycloud

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Event) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type ListServersRequest struct {
	Page  uint32 `protobuf:"varint,1,opt,name=page" json:"page,omitempty"`
	Limit uint32 `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
}

func (m *ListServersRequest) Reset()                    { *m = ListServersRequest{} }
func (m *ListServersRequest) String() string            { return proto.CompactTextString(m) }
func (*ListServersRequest) ProtoMessage()               {}
func (*ListServersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ListServersRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListServersRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListServersResponse struct {
	Servers []*Server `protobuf:"bytes,1,rep,name=servers" json:"servers,omitempty"`
}

func (m *ListServersResponse) Reset()                    { *m = ListServersResponse{} }
func (m *ListServersResponse) String() string            { return proto.CompactTextString(m) }
func (*ListServersResponse) ProtoMessage()               {}
func (*ListServersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ListServersResponse) GetServers() []*Server {
	if m != nil {
		return m.Servers
	}
	return nil
}

type CreateServerRequest struct {
	Image string `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *CreateServerRequest) Reset()                    { *m = CreateServerRequest{} }
func (m *CreateServerRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateServerRequest) ProtoMessage()               {}
func (*CreateServerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreateServerRequest) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *CreateServerRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CreateServerResponse struct {
	Server *Server `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
}

func (m *CreateServerResponse) Reset()                    { *m = CreateServerResponse{} }
func (m *CreateServerResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateServerResponse) ProtoMessage()               {}
func (*CreateServerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CreateServerResponse) GetServer() *Server {
	if m != nil {
		return m.Server
	}
	return nil
}

type Server struct {
	Id        string     `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Name      string     `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Image     string     `protobuf:"bytes,4,opt,name=image" json:"image,omitempty"`
	DataFiles *DataFiles `protobuf:"bytes,5,opt,name=data_files,json=dataFiles" json:"data_files,omitempty"`
}

func (m *Server) Reset()                    { *m = Server{} }
func (m *Server) String() string            { return proto.CompactTextString(m) }
func (*Server) ProtoMessage()               {}
func (*Server) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Server) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Server) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Server) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Server) GetDataFiles() *DataFiles {
	if m != nil {
		return m.DataFiles
	}
	return nil
}

type DataFiles struct {
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *DataFiles) Reset()                    { *m = DataFiles{} }
func (m *DataFiles) String() string            { return proto.CompactTextString(m) }
func (*DataFiles) ProtoMessage()               {}
func (*DataFiles) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DataFiles) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type ListGuildsRequest struct {
	Page  uint32 `protobuf:"varint,1,opt,name=page" json:"page,omitempty"`
	Limit uint32 `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
}

func (m *ListGuildsRequest) Reset()                    { *m = ListGuildsRequest{} }
func (m *ListGuildsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListGuildsRequest) ProtoMessage()               {}
func (*ListGuildsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ListGuildsRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListGuildsRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListGuildsResponse struct {
	Guilds []*Guild `protobuf:"bytes,1,rep,name=guilds" json:"guilds,omitempty"`
}

func (m *ListGuildsResponse) Reset()                    { *m = ListGuildsResponse{} }
func (m *ListGuildsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListGuildsResponse) ProtoMessage()               {}
func (*ListGuildsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ListGuildsResponse) GetGuilds() []*Guild {
	if m != nil {
		return m.Guilds
	}
	return nil
}

type Guild struct {
	Id        string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Connected bool   `protobuf:"varint,3,opt,name=connected" json:"connected,omitempty"`
	Ip        string `protobuf:"bytes,4,opt,name=ip" json:"ip,omitempty"`
}

func (m *Guild) Reset()                    { *m = Guild{} }
func (m *Guild) String() string            { return proto.CompactTextString(m) }
func (*Guild) ProtoMessage()               {}
func (*Guild) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Guild) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Guild) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Guild) GetConnected() bool {
	if m != nil {
		return m.Connected
	}
	return false
}

func (m *Guild) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func init() {
	proto.RegisterType((*Event)(nil), "partycloud.Event")
	proto.RegisterType((*ListServersRequest)(nil), "partycloud.ListServersRequest")
	proto.RegisterType((*ListServersResponse)(nil), "partycloud.ListServersResponse")
	proto.RegisterType((*CreateServerRequest)(nil), "partycloud.CreateServerRequest")
	proto.RegisterType((*CreateServerResponse)(nil), "partycloud.CreateServerResponse")
	proto.RegisterType((*Server)(nil), "partycloud.Server")
	proto.RegisterType((*DataFiles)(nil), "partycloud.DataFiles")
	proto.RegisterType((*ListGuildsRequest)(nil), "partycloud.ListGuildsRequest")
	proto.RegisterType((*ListGuildsResponse)(nil), "partycloud.ListGuildsResponse")
	proto.RegisterType((*Guild)(nil), "partycloud.Guild")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PCDaemon service

type PCDaemonClient interface {
	Events(ctx context.Context, opts ...grpc.CallOption) (PCDaemon_EventsClient, error)
	CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*CreateServerResponse, error)
	ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error)
	ListGuilds(ctx context.Context, in *ListGuildsRequest, opts ...grpc.CallOption) (*ListGuildsResponse, error)
}

type pCDaemonClient struct {
	cc *grpc.ClientConn
}

func NewPCDaemonClient(cc *grpc.ClientConn) PCDaemonClient {
	return &pCDaemonClient{cc}
}

func (c *pCDaemonClient) Events(ctx context.Context, opts ...grpc.CallOption) (PCDaemon_EventsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PCDaemon_serviceDesc.Streams[0], c.cc, "/partycloud.PCDaemon/Events", opts...)
	if err != nil {
		return nil, err
	}
	x := &pCDaemonEventsClient{stream}
	return x, nil
}

type PCDaemon_EventsClient interface {
	Send(*Event) error
	Recv() (*Event, error)
	grpc.ClientStream
}

type pCDaemonEventsClient struct {
	grpc.ClientStream
}

func (x *pCDaemonEventsClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pCDaemonEventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pCDaemonClient) CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*CreateServerResponse, error) {
	out := new(CreateServerResponse)
	err := grpc.Invoke(ctx, "/partycloud.PCDaemon/CreateServer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pCDaemonClient) ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error) {
	out := new(ListServersResponse)
	err := grpc.Invoke(ctx, "/partycloud.PCDaemon/ListServers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pCDaemonClient) ListGuilds(ctx context.Context, in *ListGuildsRequest, opts ...grpc.CallOption) (*ListGuildsResponse, error) {
	out := new(ListGuildsResponse)
	err := grpc.Invoke(ctx, "/partycloud.PCDaemon/ListGuilds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PCDaemon service

type PCDaemonServer interface {
	Events(PCDaemon_EventsServer) error
	CreateServer(context.Context, *CreateServerRequest) (*CreateServerResponse, error)
	ListServers(context.Context, *ListServersRequest) (*ListServersResponse, error)
	ListGuilds(context.Context, *ListGuildsRequest) (*ListGuildsResponse, error)
}

func RegisterPCDaemonServer(s *grpc.Server, srv PCDaemonServer) {
	s.RegisterService(&_PCDaemon_serviceDesc, srv)
}

func _PCDaemon_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PCDaemonServer).Events(&pCDaemonEventsServer{stream})
}

type PCDaemon_EventsServer interface {
	Send(*Event) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type pCDaemonEventsServer struct {
	grpc.ServerStream
}

func (x *pCDaemonEventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pCDaemonEventsServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PCDaemon_CreateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PCDaemonServer).CreateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partycloud.PCDaemon/CreateServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PCDaemonServer).CreateServer(ctx, req.(*CreateServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PCDaemon_ListServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PCDaemonServer).ListServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partycloud.PCDaemon/ListServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PCDaemonServer).ListServers(ctx, req.(*ListServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PCDaemon_ListGuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGuildsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PCDaemonServer).ListGuilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partycloud.PCDaemon/ListGuilds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PCDaemonServer).ListGuilds(ctx, req.(*ListGuildsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PCDaemon_serviceDesc = grpc.ServiceDesc{
	ServiceName: "partycloud.PCDaemon",
	HandlerType: (*PCDaemonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateServer",
			Handler:    _PCDaemon_CreateServer_Handler,
		},
		{
			MethodName: "ListServers",
			Handler:    _PCDaemon_ListServers_Handler,
		},
		{
			MethodName: "ListGuilds",
			Handler:    _PCDaemon_ListGuilds_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Events",
			Handler:       _PCDaemon_Events_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "party.proto",
}

// Client API for PCApi service

type PCApiClient interface {
}

type pCApiClient struct {
	cc *grpc.ClientConn
}

func NewPCApiClient(cc *grpc.ClientConn) PCApiClient {
	return &pCApiClient{cc}
}

// Server API for PCApi service

type PCApiServer interface {
}

func RegisterPCApiServer(s *grpc.Server, srv PCApiServer) {
	s.RegisterService(&_PCApi_serviceDesc, srv)
}

var _PCApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "partycloud.PCApi",
	HandlerType: (*PCApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "party.proto",
}

func init() { proto.RegisterFile("party.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 445 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xc1, 0x6e, 0x13, 0x31,
	0x10, 0xed, 0x6e, 0xbb, 0xdb, 0xee, 0xa4, 0x20, 0x75, 0x1a, 0xa4, 0x28, 0x40, 0x13, 0xf9, 0x14,
	0x10, 0x8a, 0x50, 0xe8, 0x15, 0x2a, 0x48, 0x81, 0x0b, 0x48, 0x91, 0x7b, 0xe2, 0x84, 0x4c, 0xd6,
	0xb4, 0x96, 0x92, 0x5d, 0xb3, 0x76, 0x2a, 0xfa, 0x63, 0x7c, 0x1f, 0xca, 0xd8, 0x9b, 0xf5, 0x92,
	0xe4, 0xc2, 0x6d, 0xfc, 0xfc, 0x66, 0xe6, 0xe9, 0x3d, 0x1b, 0x3a, 0x5a, 0x54, 0xf6, 0x61, 0xac,
	0xab, 0xd2, 0x96, 0x08, 0x74, 0x98, 0x2f, 0xca, 0x55, 0xce, 0x9e, 0x42, 0xf2, 0xf1, 0x5e, 0x16,
	0x16, 0x11, 0x8e, 0xec, 0x83, 0x96, 0xbd, 0x68, 0x18, 0x8d, 0x32, 0x4e, 0x35, 0x7b, 0x07, 0xf8,
	0x45, 0x19, 0x7b, 0x23, 0xab, 0x7b, 0x59, 0x19, 0x2e, 0x7f, 0xad, 0xa4, 0x21, 0xa6, 0x16, 0xb7,
	0x8e, 0xf9, 0x88, 0x53, 0x8d, 0x5d, 0x48, 0x16, 0x6a, 0xa9, 0x6c, 0x2f, 0x26, 0xd0, 0x1d, 0xd8,
	0x14, 0xce, 0x5b, 0xfd, 0x46, 0x97, 0x85, 0x91, 0xf8, 0x0a, 0x8e, 0x8d, 0x83, 0x7a, 0xd1, 0xf0,
	0x70, 0xd4, 0x99, 0xe0, 0xb8, 0x51, 0x34, 0x76, 0x6c, 0x5e, 0x53, 0xd8, 0x15, 0x9c, 0x4f, 0x2b,
	0x29, 0xac, 0xf4, 0x17, 0x5e, 0x45, 0x17, 0x12, 0xb5, 0xac, 0x65, 0x64, 0xdc, 0x1d, 0xd6, 0xda,
	0x0a, 0xb1, 0x94, 0x24, 0x23, 0xe3, 0x54, 0xb3, 0x0f, 0xd0, 0x6d, 0x0f, 0xf0, 0x32, 0x5e, 0x42,
	0xea, 0x76, 0xd0, 0x88, 0xdd, 0x2a, 0x3c, 0x83, 0xfd, 0x86, 0xd4, 0x21, 0xf8, 0x18, 0x62, 0x95,
	0xfb, 0xf9, 0xb1, 0xca, 0x37, 0x1b, 0x0f, 0x9b, 0x8d, 0x8d, 0xb6, 0xa3, 0x50, 0xdb, 0x25, 0x40,
	0x2e, 0xac, 0xf8, 0xfe, 0x53, 0x2d, 0xa4, 0xe9, 0x25, 0xb4, 0xf3, 0x49, 0xb8, 0xf3, 0x5a, 0x58,
	0xf1, 0x69, 0x7d, 0xc9, 0xb3, 0xbc, 0x2e, 0xd9, 0x00, 0xb2, 0x0d, 0xbe, 0x5e, 0x76, 0x27, 0xcc,
	0x1d, 0x09, 0x3e, 0xe5, 0x54, 0xb3, 0xb7, 0x70, 0xb6, 0x36, 0xf9, 0xf3, 0x4a, 0x2d, 0xf2, 0xff,
	0xc8, 0xe8, 0xca, 0x65, 0x5c, 0xb7, 0x7b, 0x6f, 0x5e, 0x40, 0x7a, 0x4b, 0x88, 0x4f, 0xe8, 0x2c,
	0xd4, 0x49, 0x5c, 0xee, 0x09, 0xec, 0x1b, 0x24, 0x04, 0x78, 0x67, 0xa2, 0x2d, 0x67, 0x82, 0x2c,
	0xf0, 0x19, 0x64, 0xf3, 0xb2, 0x28, 0xe4, 0xdc, 0xca, 0x9c, 0x2c, 0x3b, 0xe1, 0x0d, 0x40, 0x13,
	0xb4, 0x37, 0x2d, 0x56, 0x7a, 0xf2, 0x27, 0x86, 0x93, 0xd9, 0xf4, 0x5a, 0xc8, 0x65, 0x59, 0xe0,
	0x25, 0xa4, 0xf4, 0x52, 0x0d, 0xb6, 0xc4, 0x10, 0xd6, 0xdf, 0x86, 0xd8, 0xc1, 0x28, 0x7a, 0x1d,
	0xe1, 0x0d, 0x9c, 0x86, 0xe1, 0xe3, 0x20, 0x24, 0xee, 0x78, 0x57, 0xfd, 0xe1, 0x7e, 0x82, 0xf3,
	0x86, 0x1d, 0xe0, 0x0c, 0x3a, 0xc1, 0xbb, 0xc6, 0x8b, 0xb0, 0x65, 0xfb, 0xc3, 0xf4, 0x07, 0x7b,
	0xef, 0x37, 0x13, 0xbf, 0x02, 0x34, 0x29, 0xe0, 0xf3, 0x7f, 0x1b, 0x5a, 0xe1, 0xf6, 0x2f, 0xf6,
	0x5d, 0xd7, 0xe3, 0x26, 0xc7, 0x90, 0xcc, 0xa6, 0xef, 0xb5, 0xfa, 0x91, 0xd2, 0x8f, 0x7f, 0xf3,
	0x37, 0x00, 0x00, 0xff, 0xff, 0x88, 0xc8, 0xbe, 0xd9, 0x00, 0x04, 0x00, 0x00,
}
