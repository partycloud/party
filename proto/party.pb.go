// Code generated by protoc-gen-go. DO NOT EDIT.
// source: party.proto

/*
Package partycloud is a generated protocol buffer package.

It is generated from these files:
	party.proto

It has these top-level messages:
	CreateServerRequest
	CreateServerResponse
	ListServersRequest
	ListServersResponse
	Server
*/
package partycloud

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateServerRequest struct {
	GuildId string `protobuf:"bytes,1,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	Image   string `protobuf:"bytes,2,opt,name=image" json:"image,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *CreateServerRequest) Reset()                    { *m = CreateServerRequest{} }
func (m *CreateServerRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateServerRequest) ProtoMessage()               {}
func (*CreateServerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateServerRequest) GetGuildId() string {
	if m != nil {
		return m.GuildId
	}
	return ""
}

func (m *CreateServerRequest) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *CreateServerRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CreateServerResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *CreateServerResponse) Reset()                    { *m = CreateServerResponse{} }
func (m *CreateServerResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateServerResponse) ProtoMessage()               {}
func (*CreateServerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateServerResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ListServersRequest struct {
	GuildId []string `protobuf:"bytes,1,rep,name=guild_id,json=guildId" json:"guild_id,omitempty"`
}

func (m *ListServersRequest) Reset()                    { *m = ListServersRequest{} }
func (m *ListServersRequest) String() string            { return proto.CompactTextString(m) }
func (*ListServersRequest) ProtoMessage()               {}
func (*ListServersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ListServersRequest) GetGuildId() []string {
	if m != nil {
		return m.GuildId
	}
	return nil
}

type ListServersResponse struct {
	Servers []*Server `protobuf:"bytes,1,rep,name=servers" json:"servers,omitempty"`
}

func (m *ListServersResponse) Reset()                    { *m = ListServersResponse{} }
func (m *ListServersResponse) String() string            { return proto.CompactTextString(m) }
func (*ListServersResponse) ProtoMessage()               {}
func (*ListServersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListServersResponse) GetServers() []*Server {
	if m != nil {
		return m.Servers
	}
	return nil
}

type Server struct {
	GuildId string `protobuf:"bytes,1,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Image   string `protobuf:"bytes,4,opt,name=image" json:"image,omitempty"`
}

func (m *Server) Reset()                    { *m = Server{} }
func (m *Server) String() string            { return proto.CompactTextString(m) }
func (*Server) ProtoMessage()               {}
func (*Server) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Server) GetGuildId() string {
	if m != nil {
		return m.GuildId
	}
	return ""
}

func (m *Server) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Server) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Server) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateServerRequest)(nil), "partycloud.CreateServerRequest")
	proto.RegisterType((*CreateServerResponse)(nil), "partycloud.CreateServerResponse")
	proto.RegisterType((*ListServersRequest)(nil), "partycloud.ListServersRequest")
	proto.RegisterType((*ListServersResponse)(nil), "partycloud.ListServersResponse")
	proto.RegisterType((*Server)(nil), "partycloud.Server")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Partycloud service

type PartycloudClient interface {
	CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*CreateServerResponse, error)
	ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error)
}

type partycloudClient struct {
	cc *grpc.ClientConn
}

func NewPartycloudClient(cc *grpc.ClientConn) PartycloudClient {
	return &partycloudClient{cc}
}

func (c *partycloudClient) CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*CreateServerResponse, error) {
	out := new(CreateServerResponse)
	err := grpc.Invoke(ctx, "/partycloud.Partycloud/CreateServer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partycloudClient) ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error) {
	out := new(ListServersResponse)
	err := grpc.Invoke(ctx, "/partycloud.Partycloud/ListServers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Partycloud service

type PartycloudServer interface {
	CreateServer(context.Context, *CreateServerRequest) (*CreateServerResponse, error)
	ListServers(context.Context, *ListServersRequest) (*ListServersResponse, error)
}

func RegisterPartycloudServer(s *grpc.Server, srv PartycloudServer) {
	s.RegisterService(&_Partycloud_serviceDesc, srv)
}

func _Partycloud_CreateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartycloudServer).CreateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partycloud.Partycloud/CreateServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartycloudServer).CreateServer(ctx, req.(*CreateServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Partycloud_ListServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartycloudServer).ListServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partycloud.Partycloud/ListServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartycloudServer).ListServers(ctx, req.(*ListServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Partycloud_serviceDesc = grpc.ServiceDesc{
	ServiceName: "partycloud.Partycloud",
	HandlerType: (*PartycloudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateServer",
			Handler:    _Partycloud_CreateServer_Handler,
		},
		{
			MethodName: "ListServers",
			Handler:    _Partycloud_ListServers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "party.proto",
}

func init() { proto.RegisterFile("party.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x48, 0x2c, 0x2a,
	0xa9, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x02, 0x73, 0x92, 0x73, 0xf2, 0x4b, 0x53,
	0x94, 0xa2, 0xb8, 0x84, 0x9d, 0x8b, 0x52, 0x13, 0x4b, 0x52, 0x83, 0x53, 0x8b, 0xca, 0x52, 0x8b,
	0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x24, 0xb9, 0x38, 0xd2, 0x4b, 0x33, 0x73, 0x52,
	0xe2, 0x33, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xd8, 0xc1, 0x7c, 0xcf, 0x14, 0x21,
	0x11, 0x2e, 0xd6, 0xcc, 0xdc, 0xc4, 0xf4, 0x54, 0x09, 0x26, 0xb0, 0x38, 0x84, 0x23, 0x24, 0xc4,
	0xc5, 0x92, 0x97, 0x98, 0x9b, 0x2a, 0xc1, 0x0c, 0x16, 0x04, 0xb3, 0x95, 0xd4, 0xb8, 0x44, 0x50,
	0xcd, 0x2e, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x15, 0xe2, 0xe3, 0x62, 0x82, 0x1b, 0xcb, 0x94, 0x99,
	0xa2, 0xa4, 0xcf, 0x25, 0xe4, 0x93, 0x59, 0x5c, 0x02, 0x51, 0x55, 0x8c, 0xdd, 0x09, 0xcc, 0x48,
	0x4e, 0x50, 0x72, 0xe6, 0x12, 0x46, 0xd1, 0x00, 0x35, 0x57, 0x87, 0x8b, 0xbd, 0x18, 0x22, 0x04,
	0xd6, 0xc0, 0x6d, 0x24, 0xa4, 0x87, 0xf0, 0xa9, 0x1e, 0xd4, 0x11, 0x30, 0x25, 0x4a, 0xb1, 0x5c,
	0x6c, 0x10, 0x21, 0x7c, 0x9e, 0x85, 0x38, 0x95, 0x09, 0xe6, 0x54, 0x6c, 0xde, 0x44, 0x04, 0x08,
	0x0b, 0x52, 0x80, 0x18, 0x6d, 0x66, 0xe4, 0xe2, 0x0a, 0x80, 0xdb, 0x2e, 0x14, 0xcc, 0xc5, 0x83,
	0x1c, 0x16, 0x42, 0xf2, 0xc8, 0x4e, 0xc3, 0x12, 0x03, 0x52, 0x0a, 0xb8, 0x15, 0x40, 0xbc, 0xab,
	0xc4, 0x20, 0x14, 0xc0, 0xc5, 0x8d, 0x14, 0x0e, 0x42, 0x72, 0xc8, 0x5a, 0x30, 0x43, 0x54, 0x4a,
	0x1e, 0xa7, 0x3c, 0xcc, 0xc4, 0x24, 0x36, 0x70, 0x0a, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff,
	0xd4, 0x10, 0xfa, 0x3c, 0x30, 0x02, 0x00, 0x00,
}
