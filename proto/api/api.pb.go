// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	ListServersRequest
	ListServersResponse
	GetServerRequest
	GetServerResponse
	Server
	Fileset
	CreateServerRequest
	CreateServerResponse
	SetFilesetRequest
	SetFilesetResponse
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ListServersRequest struct {
}

func (m *ListServersRequest) Reset()                    { *m = ListServersRequest{} }
func (m *ListServersRequest) String() string            { return proto.CompactTextString(m) }
func (*ListServersRequest) ProtoMessage()               {}
func (*ListServersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ListServersResponse struct {
	Servers []*Server `protobuf:"bytes,1,rep,name=servers" json:"servers,omitempty"`
}

func (m *ListServersResponse) Reset()                    { *m = ListServersResponse{} }
func (m *ListServersResponse) String() string            { return proto.CompactTextString(m) }
func (*ListServersResponse) ProtoMessage()               {}
func (*ListServersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ListServersResponse) GetServers() []*Server {
	if m != nil {
		return m.Servers
	}
	return nil
}

type GetServerRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetServerRequest) Reset()                    { *m = GetServerRequest{} }
func (m *GetServerRequest) String() string            { return proto.CompactTextString(m) }
func (*GetServerRequest) ProtoMessage()               {}
func (*GetServerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetServerRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetServerResponse struct {
	Server *Server `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
}

func (m *GetServerResponse) Reset()                    { *m = GetServerResponse{} }
func (m *GetServerResponse) String() string            { return proto.CompactTextString(m) }
func (*GetServerResponse) ProtoMessage()               {}
func (*GetServerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetServerResponse) GetServer() *Server {
	if m != nil {
		return m.Server
	}
	return nil
}

type Server struct {
	Id      string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name    string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Image   string   `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
	Fileset *Fileset `protobuf:"bytes,4,opt,name=fileset" json:"fileset,omitempty"`
}

func (m *Server) Reset()                    { *m = Server{} }
func (m *Server) String() string            { return proto.CompactTextString(m) }
func (*Server) ProtoMessage()               {}
func (*Server) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Server) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Server) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Server) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Server) GetFileset() *Fileset {
	if m != nil {
		return m.Fileset
	}
	return nil
}

type Fileset struct {
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *Fileset) Reset()                    { *m = Fileset{} }
func (m *Fileset) String() string            { return proto.CompactTextString(m) }
func (*Fileset) ProtoMessage()               {}
func (*Fileset) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Fileset) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type CreateServerRequest struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Image string `protobuf:"bytes,2,opt,name=image" json:"image,omitempty"`
}

func (m *CreateServerRequest) Reset()                    { *m = CreateServerRequest{} }
func (m *CreateServerRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateServerRequest) ProtoMessage()               {}
func (*CreateServerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CreateServerRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateServerRequest) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

type CreateServerResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *CreateServerResponse) Reset()                    { *m = CreateServerResponse{} }
func (m *CreateServerResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateServerResponse) ProtoMessage()               {}
func (*CreateServerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CreateServerResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type SetFilesetRequest struct {
	ServerId string `protobuf:"bytes,1,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	Hash     []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *SetFilesetRequest) Reset()                    { *m = SetFilesetRequest{} }
func (m *SetFilesetRequest) String() string            { return proto.CompactTextString(m) }
func (*SetFilesetRequest) ProtoMessage()               {}
func (*SetFilesetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SetFilesetRequest) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *SetFilesetRequest) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type SetFilesetResponse struct {
}

func (m *SetFilesetResponse) Reset()                    { *m = SetFilesetResponse{} }
func (m *SetFilesetResponse) String() string            { return proto.CompactTextString(m) }
func (*SetFilesetResponse) ProtoMessage()               {}
func (*SetFilesetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func init() {
	proto.RegisterType((*ListServersRequest)(nil), "api.ListServersRequest")
	proto.RegisterType((*ListServersResponse)(nil), "api.ListServersResponse")
	proto.RegisterType((*GetServerRequest)(nil), "api.GetServerRequest")
	proto.RegisterType((*GetServerResponse)(nil), "api.GetServerResponse")
	proto.RegisterType((*Server)(nil), "api.Server")
	proto.RegisterType((*Fileset)(nil), "api.Fileset")
	proto.RegisterType((*CreateServerRequest)(nil), "api.CreateServerRequest")
	proto.RegisterType((*CreateServerResponse)(nil), "api.CreateServerResponse")
	proto.RegisterType((*SetFilesetRequest)(nil), "api.SetFilesetRequest")
	proto.RegisterType((*SetFilesetResponse)(nil), "api.SetFilesetResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Api service

type ApiClient interface {
	ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error)
	GetServer(ctx context.Context, in *GetServerRequest, opts ...grpc.CallOption) (*GetServerResponse, error)
	CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*CreateServerResponse, error)
	SetFileset(ctx context.Context, in *SetFilesetRequest, opts ...grpc.CallOption) (*SetFilesetResponse, error)
}

type apiClient struct {
	cc *grpc.ClientConn
}

func NewApiClient(cc *grpc.ClientConn) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error) {
	out := new(ListServersResponse)
	err := grpc.Invoke(ctx, "/api.Api/ListServers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetServer(ctx context.Context, in *GetServerRequest, opts ...grpc.CallOption) (*GetServerResponse, error) {
	out := new(GetServerResponse)
	err := grpc.Invoke(ctx, "/api.Api/GetServer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*CreateServerResponse, error) {
	out := new(CreateServerResponse)
	err := grpc.Invoke(ctx, "/api.Api/CreateServer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) SetFileset(ctx context.Context, in *SetFilesetRequest, opts ...grpc.CallOption) (*SetFilesetResponse, error) {
	out := new(SetFilesetResponse)
	err := grpc.Invoke(ctx, "/api.Api/SetFileset", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Api service

type ApiServer interface {
	ListServers(context.Context, *ListServersRequest) (*ListServersResponse, error)
	GetServer(context.Context, *GetServerRequest) (*GetServerResponse, error)
	CreateServer(context.Context, *CreateServerRequest) (*CreateServerResponse, error)
	SetFileset(context.Context, *SetFilesetRequest) (*SetFilesetResponse, error)
}

func RegisterApiServer(s *grpc.Server, srv ApiServer) {
	s.RegisterService(&_Api_serviceDesc, srv)
}

func _Api_ListServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).ListServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/ListServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).ListServers(ctx, req.(*ListServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetServer(ctx, req.(*GetServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_CreateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).CreateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/CreateServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).CreateServer(ctx, req.(*CreateServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_SetFileset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFilesetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).SetFileset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/SetFileset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).SetFileset(ctx, req.(*SetFilesetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Api_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListServers",
			Handler:    _Api_ListServers_Handler,
		},
		{
			MethodName: "GetServer",
			Handler:    _Api_GetServer_Handler,
		},
		{
			MethodName: "CreateServer",
			Handler:    _Api_CreateServer_Handler,
		},
		{
			MethodName: "SetFileset",
			Handler:    _Api_SetFileset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0xdf, 0x4e, 0xc2, 0x30,
	0x14, 0xc6, 0xdd, 0x86, 0xe0, 0x0e, 0xc4, 0xc8, 0x61, 0xc2, 0x9c, 0x31, 0x21, 0x35, 0x12, 0xae,
	0xb8, 0xc0, 0x1b, 0x2f, 0x48, 0x88, 0xff, 0x63, 0xe2, 0xd5, 0x78, 0x00, 0x33, 0xc3, 0x51, 0x6a,
	0x04, 0xe6, 0x3a, 0x7d, 0x0d, 0x5f, 0xd9, 0xd0, 0x76, 0xb3, 0x94, 0xdd, 0x75, 0xdf, 0x39, 0xfd,
	0x9d, 0xaf, 0x5f, 0x3b, 0xf0, 0x93, 0x94, 0x8f, 0xd2, 0x6c, 0x9d, 0xaf, 0xd1, 0x4b, 0x52, 0xce,
	0x02, 0xc0, 0x67, 0x2e, 0xf2, 0x19, 0x65, 0x3f, 0x94, 0x89, 0x98, 0xbe, 0xbe, 0x49, 0xe4, 0x6c,
	0x02, 0x9d, 0x2d, 0x55, 0xa4, 0xeb, 0x95, 0x20, 0xbc, 0x80, 0x86, 0x50, 0x52, 0xe8, 0xf4, 0xbd,
	0x61, 0x73, 0xdc, 0x1c, 0x6d, 0x70, 0xaa, 0x2d, 0x2e, 0x6a, 0x8c, 0xc1, 0xd1, 0x23, 0xe9, 0xcd,
	0x9a, 0x88, 0x87, 0xe0, 0xf2, 0x79, 0xe8, 0xf4, 0x9d, 0xa1, 0x1f, 0xbb, 0x7c, 0xce, 0xae, 0xa0,
	0x6d, 0xf4, 0x68, 0xfe, 0x39, 0xd4, 0x15, 0x43, 0x36, 0x5a, 0x78, 0x5d, 0x62, 0x1f, 0x50, 0x57,
	0x8a, 0xcd, 0x44, 0x84, 0xda, 0x2a, 0x59, 0x52, 0xe8, 0x4a, 0x45, 0xae, 0x31, 0x80, 0x7d, 0xbe,
	0x4c, 0xde, 0x29, 0xf4, 0xa4, 0xa8, 0x3e, 0x70, 0x00, 0x8d, 0x37, 0xfe, 0x49, 0x82, 0xf2, 0xb0,
	0x26, 0x27, 0xb5, 0xe4, 0xa4, 0x07, 0xa5, 0xc5, 0x45, 0x91, 0x9d, 0x41, 0x43, 0x6b, 0x1b, 0xf8,
	0x22, 0x11, 0x0b, 0x39, 0xae, 0x15, 0xcb, 0x35, 0x9b, 0x42, 0xe7, 0x36, 0xa3, 0x24, 0xa7, 0xed,
	0xb3, 0x16, 0x3e, 0x9c, 0x2a, 0x1f, 0xae, 0xe1, 0x83, 0x0d, 0x20, 0xd8, 0x06, 0xe8, 0x20, 0xec,
	0xb4, 0xee, 0xa0, 0x3d, 0xa3, 0xbc, 0xb0, 0xa7, 0xc7, 0x9c, 0x82, 0xaf, 0x22, 0x79, 0x29, 0x7b,
	0x0f, 0x94, 0xf0, 0x34, 0x2f, 0xed, 0xba, 0x86, 0xdd, 0x00, 0xd0, 0xa4, 0xa8, 0x59, 0xe3, 0x5f,
	0x17, 0xbc, 0xeb, 0x94, 0xe3, 0x0d, 0x34, 0x8d, 0x3b, 0xc7, 0x9e, 0x4c, 0x64, 0xf7, 0x6d, 0x44,
	0xe1, 0x6e, 0x41, 0x91, 0xd8, 0x1e, 0x4e, 0xc0, 0x2f, 0x6f, 0x15, 0x8f, 0x65, 0xa3, 0xfd, 0x12,
	0xa2, 0xae, 0x2d, 0x97, 0xbb, 0xef, 0xa1, 0x65, 0xa6, 0x81, 0x6a, 0x52, 0x45, 0xc2, 0xd1, 0x49,
	0x45, 0xa5, 0xc4, 0x4c, 0x01, 0xfe, 0x8f, 0x89, 0x5d, 0xfd, 0x86, 0xac, 0xf4, 0xa2, 0xde, 0x8e,
	0x5e, 0x00, 0x5e, 0xeb, 0xf2, 0xff, 0xb8, 0xfc, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xd0, 0x14, 0x7c,
	0xb3, 0x2c, 0x03, 0x00, 0x00,
}
